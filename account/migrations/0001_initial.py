# Generated by Django 5.0.6 on 2024-05-30 17:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Main',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='My Site', max_length=128)),
                ('about', models.TextField(default='-')),
                ('tell', models.CharField(default='+91 ', max_length=255)),
                ('link', models.CharField(default='-', max_length=255)),
                ('email', models.CharField(default='-', max_length=255)),
                ('location', models.CharField(default='Ahmedabad, India', max_length=255)),
                ('fb', models.CharField(default='fb', max_length=128)),
                ('tw', models.CharField(default='tw', max_length=128)),
                ('google', models.CharField(default='gg', max_length=128)),
                ('pt', models.CharField(default='pt', max_length=128)),
                ('picname', models.TextField(default='-')),
                ('picurl', models.TextField(default='-')),
                ('set_name', models.CharField(default='Site Settings', max_length=128)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('User', 'User'), ('Management', 'Management'), ('Admin', 'Admin')], default='User', max_length=20)),
                ('mobile', models.CharField(blank=True, default='0', max_length=20)),
                ('address', models.TextField(blank=True, default='-', max_length=200)),
                ('city', models.CharField(blank=True, default='-', max_length=20)),
                ('user_photo', models.ImageField(blank=True, default='users/avatar-3.jpg', upload_to='users/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
